# llama.cpp serer docs:
# https://github.com/ggerganov/llama.cpp/blob/master/examples/server/README.md
apiVersion: apps/v1
kind: Deployment
metadata:
  name: llama-cpp-server
spec:
  selector:
    matchLabels:
      app: llama-cpp-server
  template:
    metadata:
      labels:
        app: llama-cpp-server
    spec:
      containers:
        - name: llama-cpp-server
          # NOTE(sean) I built a custom version of the server which uses CUDA 11.6 so it can run on the blades.
          image: seanshahkarami/llama.cpp:server-cuda
          args: [
              "--host",
              "0.0.0.0",
              "--port",
              "1234",
              "--model",
              "/models/PsiPi/liuhaotian_llava-v1.5-13b-GGUF/llava-v1.5-13b-Q4_0.gguf",
              "--mmproj",
              "/models/PsiPi/liuhaotian_llava-v1.5-13b-GGUF/mmproj-model-Q4_0.gguf",
              # NOTE(sean) You have to explicitly pass the number of layers you want to offload to the GPU. I just
              # kind of guessed a few large numbers until I didn't see any change in VRAM usage. I assume this means
              # the entire model is offloaded. For llava-v1.5-13b-Q4_0.gguf, this increased the tokens/s from ~1.5 to
              # ~23.
              "--n-gpu-layers",
              "200",
              # From the llama.cpp server docs:
              # The default is 512, but LLaMA models were built with a context of 2048, which will provide better results for longer input/inference.
              "--ctx-size",
              "2048",
            ]
          resources:
            requests:
              cpu: 4000m
              memory: 2Gi
            limits:
              cpu: 16000m
              memory: 16Gi
          ports:
            - containerPort: 1234
          volumeMounts:
            - name: models
              mountPath: /models
              mountPropagation: HostToContainer
              readOnly: true
      volumes:
        - name: models
          hostPath:
            path: /media/plugin-data/llama-cpp-models
